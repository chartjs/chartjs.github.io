(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{179:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(1),r=n(9),i=(n(0),n(200)),o={title:"New Axes"},s={id:"developers/axes",title:"New Axes",description:"Axes in Chart.js can be individually extended. Axes should always derive from `Chart.Scale` but this is not a mandatory requirement.",source:"@site/docs/developers/axes.md",permalink:"/docs/VERSION/developers/axes",editUrl:"https://github.com/chartjs/Chart.js/edit/master/docs/docs/developers/axes.md",sidebar:"someSidebar",previous:{title:"New Charts",permalink:"/docs/VERSION/developers/charts"},next:{title:"Contributing",permalink:"/docs/VERSION/developers/contributing"}},c=[{value:"Scale Properties",id:"scale-properties",children:[]},{value:"Scale Interface",id:"scale-interface",children:[]}],l={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Axes in Chart.js can be individually extended. Axes should always derive from ",Object(i.b)("inlineCode",{parentName:"p"},"Chart.Scale")," but this is not a mandatory requirement."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"let MyScale = Chart.Scale.extend({\n    /* extensions ... */\n});\nMyScale.id = 'myScale';\nMyScale.defaults = defaultConfigObject;\n\n// MyScale is now derived from Chart.Scale\n")),Object(i.b)("p",null,"Once you have created your scale class, you need to register it with the global chart object so that it can be used. A default config for the scale may be provided when registering the constructor. The first parameter to the register function is a string key that is used later to identify which scale type to use for a chart."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"Chart.scaleService.registerScale(MyScale);\n")),Object(i.b)("p",null,"To use the new scale, simply pass in the string key to the config when creating a chart."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"var lineChart = new Chart(ctx, {\n    data: data,\n    type: 'line',\n    options: {\n        scales: {\n            y: {\n                type: 'myScale' // this is the same id that was set on the scale\n            }\n        }\n    }\n});\n")),Object(i.b)("h2",{id:"scale-properties"},"Scale Properties"),Object(i.b)("p",null,"Scale instances are given the following properties during the fitting process."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    left: number, // left edge of the scale bounding box\n    right: number, // right edge of the bounding box\n    top: number,\n    bottom: number,\n    width: number, // the same as right - left\n    height: number, // the same as bottom - top\n\n    // Margin on each side. Like css, this is outside the bounding box.\n    margins: {\n        left: number,\n        right: number,\n        top: number,\n        bottom: number\n    },\n\n    // Amount of padding on the inside of the bounding box (like CSS)\n    paddingLeft: number,\n    paddingRight: number,\n    paddingTop: number,\n    paddingBottom: number\n}\n")),Object(i.b)("h2",{id:"scale-interface"},"Scale Interface"),Object(i.b)("p",null,"To work with Chart.js, custom scale types must implement the following interface."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    // Determines the data limits. Should set this.min and this.max to be the data max/min\n    determineDataLimits: function() {},\n\n    // Generate tick marks. this.chart is the chart instance. The data object can be accessed as this.chart.data\n    // buildTicks() should create a ticks array on the axis instance, if you intend to use any of the implementations from the base class\n    buildTicks: function() {},\n\n    // Get the label to show for the given value\n    getLabelForValue: function(value) {},\n\n    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value\n    // @param index: index into the ticks array\n    getPixelForTick: function(index) {},\n\n    // Get the pixel (x coordinate for horizontal axis, y coordinate for vertical axis) for a given value\n    // @param value : the value to get the pixel for\n    // @param index : index into the data array of the value\n    // @param datasetIndex : index of the dataset the value comes from\n    getPixelForValue: function(value, index, datasetIndex) {},\n\n    // Get the value for a given pixel (x coordinate for horizontal axis, y coordinate for vertical axis)\n    // @param pixel : pixel value\n    getValueForPixel: function(pixel) {}\n}\n")),Object(i.b)("p",null,"Optionally, the following methods may also be overwritten, but an implementation is already provided by the ",Object(i.b)("inlineCode",{parentName:"p"},"Chart.Scale")," base class."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    // Adds labels to objects in the ticks array. The default implementation simply calls this.options.ticks.callback(numericalTick, index, ticks);\n    generateTickLabels: function() {},\n\n    // Determine how much the labels will rotate by. The default implementation will only rotate labels if the scale is horizontal.\n    calculateLabelRotation: function() {},\n\n    // Fits the scale into the canvas.\n    // this.maxWidth and this.maxHeight will tell you the maximum dimensions the scale instance can be. Scales should endeavour to be as efficient as possible with canvas space.\n    // this.margins is the amount of space you have on either side of your scale that you may expand in to. This is used already for calculating the best label rotation\n    // You must set this.minSize to be the size of your scale. It must be an object containing 2 properties: width and height.\n    // You must set this.width to be the width and this.height to be the height of the scale\n    fit: function() {},\n\n    // Draws the scale onto the canvas. this.(left|right|top|bottom) will have been populated to tell you the area on the canvas to draw in\n    // @param chartArea : an object containing four properties: left, right, top, bottom. This is the rectangle that lines, bars, etc will be drawn in. It may be used, for example, to draw grid lines.\n    draw: function(chartArea) {}\n}\n")),Object(i.b)("p",null,"The Core.Scale base class also has some utility functions that you may find useful."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    // Returns true if the scale instance is horizontal\n    isHorizontal: function() {},\n\n    // Get the correct value from the value from this.chart.data.datasets[x].data[]\n    // If dataValue is an object, returns .x or .y depending on the return of isHorizontal()\n    // If the value is undefined, returns NaN\n    // Otherwise returns the value.\n    // Note that in all cases, the returned value is not guaranteed to be a number\n    getRightValue: function(dataValue) {},\n\n    // Returns the scale tick objects ({label, major})\n    getTicks: function() {}\n}\n")))}u.isMDXComponent=!0},200:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return p}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),u=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},h=function(e){var t=u(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),h=u(n),b=a,p=h["".concat(o,".").concat(b)]||h[b]||d[b]||i;return n?r.a.createElement(p,s({ref:t},l,{components:n})):r.a.createElement(p,s({ref:t},l))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);